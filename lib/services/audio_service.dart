import 'package:audioplayers/audioplayers.dart';
import '../services/hive_service.dart';
import '../models/game_settings.dart';

/// üéµ SERVICIO DE AUDIO - Gesti√≥n de Sonidos y M√∫sica
/// 
/// Funcionalidades:
/// - üé≤ Efectos de sonido del juego
/// - üé∂ M√∫sica de fondo
/// - üîä Control de volumen independiente
/// - ‚öôÔ∏è Configuraci√≥n desde GameSettings
class AudioService {
  static final AudioService _instance = AudioService._internal();
  factory AudioService() => _instance;
  AudioService._internal();

  // üéµ Reproductores de audio
  final AudioPlayer _effectsPlayer = AudioPlayer();
  final AudioPlayer _musicPlayer = AudioPlayer();
  
  // üìä Estado del servicio
  bool _isInitialized = false;
  bool _soundEnabled = true;
  double _effectsVolume = 0.8;
  double _musicVolume = 0.7;

  // üöÄ Inicializar servicio de audio
  Future<void> initialize() async {
    try {
      // Configurar reproductores
      await _effectsPlayer.setReleaseMode(ReleaseMode.stop);
      await _musicPlayer.setReleaseMode(ReleaseMode.loop);
      
      // Cargar configuraciones
      _loadSettings();
      
      _isInitialized = true;
      print('üéµ AudioService inicializado correctamente');
    } catch (e) {
      print('‚ùå Error inicializando AudioService: $e');
    }
  }

  // ‚öôÔ∏è Cargar configuraciones desde Hive
  void _loadSettings() {
    final settings = HiveService.getSettings();
    _effectsVolume = settings.effectsVolume;
    _musicVolume = settings.musicVolume;
    _soundEnabled = settings.soundEnabled;
    
    print('üîä Configuraci√≥n de audio cargada:');
    print('   Efectos: ${(_effectsVolume * 100).toInt()}%');
    print('   M√∫sica: ${(_musicVolume * 100).toInt()}%');
    print('   Habilitado: $_soundEnabled');
  }

  // üé≤ EFECTOS DE SONIDO DEL JUEGO

  /// Sonido del dado rodando
  Future<void> playDiceRoll() async {
    await _playEffect('Dice.mp3');
  }

  /// Sonido de mover ficha (pop corto y preciso)
  Future<void> playPieceMove() async {
    if (!_isInitialized || !_soundEnabled || _effectsVolume == 0.0) {
      return;
    }

    try {
      // üéØ SONIDO CORTO Y PRECISO para movimiento de ficha (120ms)
      await _effectsPlayer.setVolume(_effectsVolume);
      await _effectsPlayer.play(AssetSource('audio/effects/pop_ficha_short.wav'));
      print('üîä Reproduciendo efecto: pop_ficha_short.wav (120ms - perfecto para pasos)');
    } catch (e) {
      print('‚ùå Error reproduciendo pop_ficha.mp3: $e');
    }
  }

  /// Sonido de subir ficha (captura o llegada a casa)
  Future<void> playPieceUp() async {
    await _playEffect('Subir.mp3');
  }

  /// Sonido de bajar ficha (ser capturado)
  Future<void> playPieceDown() async {
    await _playEffect('down_token.mp3');
  }

  /// Sonido de victoria/fanfarria
  Future<void> playVictory() async {
    await _playEffect('fanfare.mp3');
  }

  /// Sonido de risa (CPU burl√°ndose)
  Future<void> playLaugh() async {
    await _playEffect('risa.mp3');
  }

  /// Sonido de emoci√≥n/sorpresa
  Future<void> playExcitement() async {
    await _playEffect('uiiiiiiii.mp3');
  }

  /// Sonido de perder turno
  Future<void> playLoseTurn() async {
    await _playEffect('pierde_turno.mp3');
  }

  /// Sonido para nuevo lanzamiento/turno extra
  Future<void> playNewTurn() async {
    await _playEffect('lanzar_nuevo.mp3');
  }

  /// Sonido de timer/tiempo l√≠mite
  Future<void> playTimer() async {
    await _playEffect('timer.mp3');
  }

  // üéµ Reproducir efecto de sonido
  Future<void> _playEffect(String filename) async {
    if (!_isInitialized || !_soundEnabled || _effectsVolume == 0.0) {
      return;
    }

    try {
      await _effectsPlayer.setVolume(_effectsVolume);
      await _effectsPlayer.play(AssetSource('audio/effects/$filename'));
      print('üîä Reproduciendo efecto: $filename');
    } catch (e) {
      print('‚ùå Error reproduciendo $filename: $e');
    }
  }

  // üé∂ M√öSICA DE FONDO

  /// Reproducir m√∫sica de fondo
  Future<void> playBackgroundMusic(String filename) async {
    if (!_isInitialized || !_soundEnabled || _musicVolume == 0.0) {
      return;
    }

    try {
      await _musicPlayer.setVolume(_musicVolume);
      await _musicPlayer.play(AssetSource('audio/music/$filename'));
      print('üé∂ Reproduciendo m√∫sica: $filename');
    } catch (e) {
      print('‚ùå Error reproduciendo m√∫sica $filename: $e');
    }
  }

  /// Pausar m√∫sica de fondo
  Future<void> pauseBackgroundMusic() async {
    try {
      await _musicPlayer.pause();
      print('‚è∏Ô∏è M√∫sica pausada');
    } catch (e) {
      print('‚ùå Error pausando m√∫sica: $e');
    }
  }

  /// Reanudar m√∫sica de fondo
  Future<void> resumeBackgroundMusic() async {
    try {
      await _musicPlayer.resume();
      print('‚ñ∂Ô∏è M√∫sica reanudada');
    } catch (e) {
      print('‚ùå Error reanudando m√∫sica: $e');
    }
  }

  /// Detener m√∫sica de fondo
  Future<void> stopBackgroundMusic() async {
    try {
      await _musicPlayer.stop();
      print('‚èπÔ∏è M√∫sica detenida');
    } catch (e) {
      print('‚ùå Error deteniendo m√∫sica: $e');
    }
  }

  // ‚öôÔ∏è CONFIGURACI√ìN DE AUDIO

  /// Actualizar volumen de efectos
  Future<void> setEffectsVolume(double volume) async {
    _effectsVolume = volume.clamp(0.0, 1.0);
    await _effectsPlayer.setVolume(_effectsVolume);
    print('üîä Volumen de efectos: ${(_effectsVolume * 100).toInt()}%');
  }

  /// Actualizar volumen de m√∫sica
  Future<void> setMusicVolume(double volume) async {
    _musicVolume = volume.clamp(0.0, 1.0);
    await _musicPlayer.setVolume(_musicVolume);
    print('üé∂ Volumen de m√∫sica: ${(_musicVolume * 100).toInt()}%');
  }

  /// Habilitar/deshabilitar sonido
  void setSoundEnabled(bool enabled) {
    _soundEnabled = enabled;
    if (!enabled) {
      stopBackgroundMusic();
    }
    print('üîä Sonido ${enabled ? 'habilitado' : 'deshabilitado'}');
  }

  /// Actualizar configuraciones desde GameSettings
  void updateFromSettings(GameSettings settings) {
    _effectsVolume = settings.effectsVolume;
    _musicVolume = settings.musicVolume;
    _soundEnabled = settings.soundEnabled;
    
    // Aplicar cambios inmediatamente
    _effectsPlayer.setVolume(_effectsVolume);
    _musicPlayer.setVolume(_musicVolume);
    
    if (!_soundEnabled) {
      stopBackgroundMusic();
    }
  }

  // üéÆ EFECTOS ESPECIALES PARA EL JUEGO

  /// Secuencia de sonidos para victoria
  Future<void> playVictorySequence() async {
    await playVictory();
    await Future.delayed(const Duration(milliseconds: 500));
    await playExcitement();
  }

  /// Secuencia de sonidos para captura de ficha
  Future<void> playCaptureSequence() async {
    await playPieceDown();
    await Future.delayed(const Duration(milliseconds: 300));
    await playLaugh();
  }

  /// Efecto de sonido para rebote
  Future<void> playBounceEffect() async {
    await playExcitement(); // Usar sonido de sorpresa para el rebote
  }

  /// Efecto para llegada a META
  Future<void> playGoalEffect() async {
    await playPieceUp();
    await Future.delayed(const Duration(milliseconds: 200));
    await playExcitement();
  }

  // üìä Getters
  bool get isInitialized => _isInitialized;
  bool get soundEnabled => _soundEnabled;
  double get effectsVolume => _effectsVolume;
  double get musicVolume => _musicVolume;

  // üîá DETENER TODOS LOS SONIDOS INMEDIATAMENTE
  Future<void> stopAllSounds() async {
    try {
      await _effectsPlayer.stop();
      await _musicPlayer.stop();
      print('üîá Todos los sonidos detenidos');
    } catch (e) {
      print('‚ö†Ô∏è Error deteniendo sonidos: $e');
    }
  }

  // üßπ Limpieza
  Future<void> dispose() async {
    await stopAllSounds(); // Detener sonidos antes de liberar recursos
    await _effectsPlayer.dispose();
    await _musicPlayer.dispose();
    print('üßπ AudioService liberado');
  }
}