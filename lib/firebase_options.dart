// File generated by FlutterFire CLI.// File generated by FlutterFire CLI.// File generated by FlutterFire CLI.

// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members

import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members

import 'package:flutter/foundation.dart'

    show defaultTargetPlatform, kIsWeb, TargetPlatform;import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;



/// Default [FirebaseOptions] for use with your Firebase apps.import 'package:flutter/foundation.dart'import 'package:flutter/foundation.dart'

///

/// Example:    show defaultTargetPlatform, kIsWeb, TargetPlatform;    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// ```dart

/// import 'firebase_options.dart';

/// // ...

/// await Firebase.initializeApp(/// Default [FirebaseOptions] for use with your Firebase apps./// Default [FirebaseOptions] for use with your Firebase apps.

///   options: DefaultFirebaseOptions.currentPlatform,

/// );//////

/// ```

class DefaultFirebaseOptions {/// Example:/// Example:

  static FirebaseOptions get currentPlatform {

    if (kIsWeb) {/// ```dart/// ```dart

      return web;

    }/// import 'firebase_options.dart';/// import 'firebase_options.dart';

    switch (defaultTargetPlatform) {

      case TargetPlatform.android:/// // .../// // ...

        return android;

      case TargetPlatform.iOS:/// await Firebase.initializeApp(/// await Firebase.initializeApp(

        return ios;

      case TargetPlatform.macOS:///   options: DefaultFirebaseOptions.currentPlatform,///   options: DefaultFirebaseOptions.currentPlatform,

        return macos;

      case TargetPlatform.windows:/// );/// );

        return windows;

      case TargetPlatform.linux:/// ```/// ```

        throw UnsupportedError(

          'DefaultFirebaseOptions have not been configured for linux - 'class DefaultFirebaseOptions {class DefaultFirebaseOptions {

          'you can reconfigure this by running the FlutterFire CLI again.',

        );  static FirebaseOptions get currentPlatform {  static FirebaseOptions get currentPlatform {

      default:

        throw UnsupportedError(    if (kIsWeb) {    if (kIsWeb) {

          'DefaultFirebaseOptions are not supported for this platform.',

        );      return web;      return web;

    }

  }    }    }



  static const FirebaseOptions web = FirebaseOptions(    switch (defaultTargetPlatform) {    switch (defaultTargetPlatform) {

    apiKey: 'AIzaSyCdRjHQ8yQZ4H9Y_b7oH4oH6CL8N0PXmCE',

    appId: '1:123456789:web:abcdef1234567890abcdef',      case TargetPlatform.android:      case TargetPlatform.android:

    messagingSenderId: '123456789',

    projectId: 'parchis-reverse-app',        return android;        return android;

    authDomain: 'parchis-reverse-app.firebaseapp.com',

    storageBucket: 'parchis-reverse-app.appspot.com',      case TargetPlatform.iOS:      case TargetPlatform.iOS:

    measurementId: 'G-ABCDEFGHIJ',

  );        return ios;        return ios;



  static const FirebaseOptions android = FirebaseOptions(      case TargetPlatform.macOS:      case TargetPlatform.macOS:

    apiKey: 'AIzaSyCdRjHQ8yQZ4H9Y_b7oH4oH6CL8N0PXmCE',

    appId: '1:123456789:android:abcdef1234567890abcdef',        return macos;        return macos;

    messagingSenderId: '123456789',

    projectId: 'parchis-reverse-app',      case TargetPlatform.windows:      case TargetPlatform.windows:

    storageBucket: 'parchis-reverse-app.appspot.com',

  );        return windows;        throw UnsupportedError(



  static const FirebaseOptions ios = FirebaseOptions(      case TargetPlatform.linux:          'DefaultFirebaseOptions have not been configured for windows - '

    apiKey: 'AIzaSyCdRjHQ8yQZ4H9Y_b7oH4oH6CL8N0PXmCE',

    appId: '1:123456789:ios:abcdef1234567890abcdef',        throw UnsupportedError(          'you can reconfigure this by running the FlutterFire CLI again.',

    messagingSenderId: '123456789',

    projectId: 'parchis-reverse-app',          'DefaultFirebaseOptions have not been configured for linux - '        );

    storageBucket: 'parchis-reverse-app.appspot.com',

    iosBundleId: 'com.example.parchisReverseApp',          'you can reconfigure this by running the FlutterFire CLI again.',      case TargetPlatform.linux:

  );

        );        throw UnsupportedError(

  static const FirebaseOptions macos = FirebaseOptions(

    apiKey: 'AIzaSyCdRjHQ8yQZ4H9Y_b7oH4oH6CL8N0PXmCE',      default:          'DefaultFirebaseOptions have not been configured for linux - '

    appId: '1:123456789:ios:abcdef1234567890abcdef',

    messagingSenderId: '123456789',        throw UnsupportedError(          'you can reconfigure this by running the FlutterFire CLI again.',

    projectId: 'parchis-reverse-app',

    storageBucket: 'parchis-reverse-app.appspot.com',          'DefaultFirebaseOptions are not supported for this platform.',        );

    iosBundleId: 'com.example.parchisReverseApp',

  );        );      default:



  static const FirebaseOptions windows = FirebaseOptions(    }        throw UnsupportedError(

    apiKey: 'AIzaSyCdRjHQ8yQZ4H9Y_b7oH4oH6CL8N0PXmCE',

    appId: '1:123456789:web:abcdef1234567890abcdef',  }          'DefaultFirebaseOptions are not supported for this platform.',

    messagingSenderId: '123456789',

    projectId: 'parchis-reverse-app',        );

    authDomain: 'parchis-reverse-app.firebaseapp.com',

    storageBucket: 'parchis-reverse-app.appspot.com',  static const FirebaseOptions web = FirebaseOptions(    }

    measurementId: 'G-ABCDEFGHIJ',

  );    apiKey: 'AIzaSyCdRjHQ8yQZ4H9Y_b7oH4oH6CL8N0PXmCE',  }

}
    appId: '1:123456789:web:abcdef1234567890abcdef',

    messagingSenderId: '123456789',  // Credenciales reales de Firebase

    projectId: 'parchis-reverse-app',  static const FirebaseOptions web = FirebaseOptions(

    authDomain: 'parchis-reverse-app.firebaseapp.com',    apiKey: 'AIzaSyC4sHUrfFxd8WTNo75KDRUzOAMIohhmgPI',

    storageBucket: 'parchis-reverse-app.appspot.com',    appId: '1:837321484025:web:tu-web-app-id', // Se configurará cuando agregues la app web

    measurementId: 'G-ABCDEFGHIJ',    messagingSenderId: '837321484025',

  );    projectId: 'parchis-reverse-app',

    authDomain: 'parchis-reverse-app.firebaseapp.com',

  static const FirebaseOptions android = FirebaseOptions(    databaseURL: 'https://parchis-reverse-app-default-rtdb.firebaseio.com',

    apiKey: 'AIzaSyCdRjHQ8yQZ4H9Y_b7oH4oH6CL8N0PXmCE',    storageBucket: 'parchis-reverse-app.firebasestorage.app',

    appId: '1:123456789:android:abcdef1234567890abcdef',    measurementId: 'TU_MEASUREMENT_ID',

    messagingSenderId: '123456789',  );

    projectId: 'parchis-reverse-app',

    storageBucket: 'parchis-reverse-app.appspot.com',  static const FirebaseOptions android = FirebaseOptions(

  );    apiKey: 'AIzaSyC4sHUrfFxd8WTNo75KDRUzOAMIohhmgPI',

    appId: '1:837321484025:android:859d0b836998587c892428',

  static const FirebaseOptions ios = FirebaseOptions(    messagingSenderId: '837321484025',

    apiKey: 'AIzaSyCdRjHQ8yQZ4H9Y_b7oH4oH6CL8N0PXmCE',    projectId: 'parchis-reverse-app',

    appId: '1:123456789:ios:abcdef1234567890abcdef',    databaseURL: 'https://parchis-reverse-app-default-rtdb.firebaseio.com',

    messagingSenderId: '123456789',    storageBucket: 'parchis-reverse-app.firebasestorage.app',

    projectId: 'parchis-reverse-app',  );

    storageBucket: 'parchis-reverse-app.appspot.com',

    iosBundleId: 'com.example.parchisReverseApp',  static const FirebaseOptions ios = FirebaseOptions(

  );    apiKey: 'AIzaSyC4sHUrfFxd8WTNo75KDRUzOAMIohhmgPI',

    appId: '1:837321484025:ios:tu-ios-app-id', // Se configurará cuando agregues la app iOS

  static const FirebaseOptions macos = FirebaseOptions(    messagingSenderId: '837321484025',

    apiKey: 'AIzaSyCdRjHQ8yQZ4H9Y_b7oH4oH6CL8N0PXmCE',    projectId: 'parchis-reverse-app',

    appId: '1:123456789:ios:abcdef1234567890abcdef',    databaseURL: 'https://parchis-reverse-app-default-rtdb.firebaseio.com',

    messagingSenderId: '123456789',    storageBucket: 'parchis-reverse-app.firebasestorage.app',

    projectId: 'parchis-reverse-app',    iosBundleId: 'com.example.parchisReverseApp',

    storageBucket: 'parchis-reverse-app.appspot.com',  );

    iosBundleId: 'com.example.parchisReverseApp',

  );  static const FirebaseOptions macos = FirebaseOptions(

    apiKey: 'AIzaSyC4sHUrfFxd8WTNo75KDRUzOAMIohhmgPI',

  static const FirebaseOptions windows = FirebaseOptions(    appId: '1:837321484025:macos:tu-macos-app-id', // Se configurará cuando agregues la app macOS

    apiKey: 'AIzaSyCdRjHQ8yQZ4H9Y_b7oH4oH6CL8N0PXmCE',    messagingSenderId: '837321484025',

    appId: '1:123456789:web:abcdef1234567890abcdef',    projectId: 'parchis-reverse-app',

    messagingSenderId: '123456789',    databaseURL: 'https://parchis-reverse-app-default-rtdb.firebaseio.com',

    projectId: 'parchis-reverse-app',    storageBucket: 'parchis-reverse-app.firebasestorage.app',

    authDomain: 'parchis-reverse-app.firebaseapp.com',    iosBundleId: 'com.example.parchisReverseApp',

    storageBucket: 'parchis-reverse-app.appspot.com',  );

    measurementId: 'G-ABCDEFGHIJ',}
  );
}